global def sshAgentResource = "ssh-agent"

global def sshAgentEnvVar = "SSH_AUTH_SOCK"

# Create a runner that provides ssh-agent forwarding as a resource
#
# name:       Name of the created runner
# scoreMult:  Multiplier applied to score of baseRunner for a given Plan
# baseRunner: The runner we will extend
global def makeSSHAgentRunner name scoreMult baseRunner =
  def sshEnvResult = getenv sshAgentEnvVar | getOrFail ("Environment variable '{sshAgentEnvVar}' not set!")

  def score plan =
    def pieces = plan.getPlanResources | splitBy (_ ==~ sshAgentResource)
    def found = pieces.getPairFirst
    def newResources = pieces.getPairSecond
    if found.empty then Fail "{name} only applies to Plans requiring resource '{sshAgentResource}'"
    else
      sshEnvResult
      # If sshEnvResult is Fail, propagate, otherwise calculate score
      | rmap (\_ setPlanResources newResources plan)
      | rmapPass (baseRunner.getRunnerScore)
      | rmap (scoreMult *. _)

  def pre in =
    def result = match sshEnvResult
      Fail str = Fail str.makeError
      Pass value =
        in
        | rmap (editRunnerInputEnvironment ("{sshAgentEnvVar}={value}", _))
    Pair result Unit

  def post (Pair out Unit) = out

  makeRunner name score pre post baseRunner
